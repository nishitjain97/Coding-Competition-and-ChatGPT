Name,Description
exception BaseException,"The base class for all built-in exceptions. It is not meant to be directly inherited by user-defined classes (for that, use Exception). If str() is called on an instance of this class, the representation of the argument(s) to the instance are returned, or the empty string when there were no arguments."
exception Exception,"All built-in, non-system-exiting exceptions are derived from this class. All user-defined exceptions should also be derived from this class."
exception ArithmeticError,"The base class for those built-in exceptions that are raised for various arithmetic errors: OverflowError, ZeroDivisionError, FloatingPointError."
exception BufferError,Raised when a buffer related operation cannot be performed.
exception LookupError,"The base class for the exceptions that are raised when a key or index used on a mapping or sequence is invalid: IndexError, KeyError. This can be raised directly by codecs.lookup()."
exception AssertionError,Raised when an assert statement fails.
exception AttributeError,"Raised when an attribute reference (see Attribute references) or assignment fails. (When an object does not support attribute references or attribute assignments at all, TypeError is raised.)"
exception EOFError,Raised when the input() function hits an end-of-file condition (EOF) without reading any data. (N.B.: the io.IOBase.read() and io.IOBase.readline() methods return an empty string when they hit EOF.)
exception FloatingPointError,Not currently used.
exception GeneratorExit,Raised when a generator or coroutine is closed; see generator.close() and coroutine.close(). It directly inherits from BaseException instead of Exception since it is technically not an error.
exception ImportError,Raised when the import statement has troubles trying to load a module. Also raised when the “from list” in from ... import has a name that cannot be found.
exception ModuleNotFoundError,A subclass of ImportError which is raised by import when a module could not be located. It is also raised when None is found in sys.modules.
exception IndexError,"Raised when a sequence subscript is out of range. (Slice indices are silently truncated to fall in the allowed range; if an index is not an integer, TypeError is raised.)"
exception KeyError,Raised when a mapping (dictionary) key is not found in the set of existing keys.
exception KeyboardInterrupt,"Raised when the user hits the interrupt key (normally Control-C or Delete). During execution, a check for interrupts is made regularly. The exception inherits from BaseException so as to not be accidentally caught by code that catches Exception and thus prevent the interpreter from exiting."
exception MemoryError,"Raised when an operation runs out of memory but the situation may still be rescued (by deleting some objects). The associated value is a string indicating what kind of (internal) operation ran out of memory. Note that because of the underlying memory management architecture (C’s malloc() function), the interpreter may not always be able to completely recover from this situation; it nevertheless raises an exception so that a stack traceback can be printed, in case a run-away program was the cause."
exception NameError,Raised when a local or global name is not found. This applies only to unqualified names. The associated value is an error message that includes the name that could not be found.
exception NotImplementedError,"This exception is derived from RuntimeError. In user defined base classes, abstract methods should raise this exception when they require derived classes to override the method, or while the class is being developed to indicate that the real implementation still needs to be added."
exception OSError([arg]),"This exception is raised when a system function returns a system-related error, including I/O failures such as “file not found” or “disk full” (not for illegal argument types or other incidental errors)."
exception OverflowError,"Raised when the result of an arithmetic operation is too large to be represented. This cannot occur for integers (which would rather raise MemoryError than give up). However, for historical reasons, OverflowError is sometimes raised for integers that are outside a required range. Because of the lack of standardization of floating point exception handling in C, most floating point operations are not checked."
exception RecursionError,This exception is derived from RuntimeError. It is raised when the interpreter detects that the maximum recursion depth (see sys.getrecursionlimit()) is exceeded.
exception ReferenceError,"This exception is raised when a weak reference proxy, created by the weakref.proxy() function, is used to access an attribute of the referent after it has been garbage collected. For more information on weak references, see the weakref module."
exception RuntimeError,Raised when an error is detected that doesn’t fall in any of the other categories. The associated value is a string indicating what precisely went wrong.
exception StopIteration,Raised by built-in function next() and an iterator's __next__() method to signal that there are no further items produced by the iterator.
exception StopAsyncIteration,Must be raised by __anext__() method of an asynchronous iterator object to stop the iteration.
"exception SyntaxError(message, details)","Raised when the parser encounters a syntax error. This may occur in an import statement, in a call to the built-in functions compile(), exec(), or eval(), or when reading the initial script or standard input (also interactively)."
exception IndentationError,Base class for syntax errors related to incorrect indentation. This is a subclass of SyntaxError.
exception TabError,Raised when indentation contains an inconsistent use of tabs and spaces. This is a subclass of IndentationError.
exception SystemError,"Raised when the interpreter finds an internal error, but the situation does not look so serious to cause it to abandon all hope. The associated value is a string indicating what went wrong (in low-level terms)."
exception SystemExit,"This exception is raised by the sys.exit() function. It inherits from BaseException instead of Exception so that it is not accidentally caught by code that catches Exception. This allows the exception to properly propagate up and cause the interpreter to exit. When it is not handled, the Python interpreter exits; no stack traceback is printed. The constructor accepts the same optional argument passed to sys.exit(). If the value is an integer, it specifies the system exit status (passed to C’s exit() function); if it is None, the exit status is zero; if it has another type (such as a string), the object’s value is printed and the exit status is one."
exception TypeError,Raised when an operation or function is applied to an object of inappropriate type. The associated value is a string giving details about the type mismatch.
exception UnboundLocalError,"Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable. This is a subclass of NameError."
exception UnicodeError,Raised when a Unicode-related encoding or decoding error occurs. It is a subclass of ValueError.
exception UnicodeEncodeError,Raised when a Unicode-related error occurs during encoding. It is a subclass of UnicodeError.
exception UnicodeDecodeError,Raised when a Unicode-related error occurs during decoding. It is a subclass of UnicodeError.
exception UnicodeTranslateError,Raised when a Unicode-related error occurs during translating. It is a subclass of UnicodeError.
exception ValueError,"Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError."
exception ZeroDivisionError,Raised when the second argument of a division or modulo operation is zero. The associated value is a string indicating the type of the operands and the operation.
exception WindowsError,Only available on Windows.
exception BlockingIOError,"Raised when an operation would block on an object (e.g. socket) set for non-blocking operation. Corresponds to errno EAGAIN, EALREADY, EWOULDBLOCK and EINPROGRESS."
exception ChildProcessError,Raised when an operation on a child process failed. Corresponds to errno ECHILD.
exception ConnectionError,A base class for connection-related issues.
exception BrokenPipeError,"A subclass of ConnectionError, raised when trying to write on a pipe while the other end has been closed, or trying to write on a socket which has been shutdown for writing. Corresponds to errno EPIPE and ESHUTDOWN."
exception ConnectionAbortedError,"A subclass of ConnectionError, raised when a connection attempt is aborted by the peer. Corresponds to errno ECONNABORTED."
exception ConnectionRefusedError,"A subclass of ConnectionError, raised when a connection attempt is refused by the peer. Corresponds to errno ECONNREFUSED."
exception ConnectionResetError,"A subclass of ConnectionError, raised when a connection is reset by the peer. Corresponds to errno ECONNRESET."
exception FileExistsError,Raised when trying to create a file or directory which already exists. Corresponds to errno EEXIST.
exception FileNotFoundError,Raised when a file or directory is requested but doesn’t exist. Corresponds to errno ENOENT.
exception InterruptedError,Raised when a system call is interrupted by an incoming signal. Corresponds to errno EINTR.
exception IsADirectoryError,Raised when a file operation (such as os.remove()) is requested on a directory. Corresponds to errno EISDIR.
exception NotADirectoryError,"Raised when a directory operation (such as os.listdir()) is requested on something which is not a directory. On most POSIX platforms, it may also be raised if an operation attempts to open or traverse a non-directory file as if it were a directory. Corresponds to errno ENOTDIR."
exception PermissionError,"Raised when trying to run an operation without the adequate access rights - for example filesystem permissions. Corresponds to errno EACCES, EPERM, and ENOTCAPABLE."
exception ProcessLookupError,Raised when a given process doesn’t exist. Corresponds to errno ESRCH.
exception TimeoutError,Raised when a system function timed out at the system level. Corresponds to errno ETIMEDOUT.
exception Warning,Base class for warning categories.
exception UserWarning,Base class for warnings generated by user code.
exception DeprecationWarning,Base class for warnings about deprecated features when those warnings are intended for other Python developers.
exception PendingDeprecationWarning,"Base class for warnings about features which are obsolete and expected to be deprecated in the future, but are not deprecated at the moment."
exception SyntaxWarning,Base class for warnings about dubious syntax.
exception RuntimeWarning,Base class for warnings about dubious runtime behavior.
exception FutureWarning,Base class for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python.
exception ImportWarning,Base class for warnings about probable mistakes in module imports.
exception UnicodeWarning,Base class for warnings related to Unicode.
exception EncodingWarning,Base class for warnings related to encodings.
exception BytesWarning,Base class for warnings related to bytes and bytearray.
exception ResourceWarning,Base class for warnings related to resource usage.
"exception BaseExceptionGroup(msg, excs)","Both of these exception types wrap the exceptions in the sequence excs. The msg parameter must be a string. The difference between the two classes is that BaseExceptionGroup extends BaseException and it can wrap any exception, while ExceptionGroup extends Exception and it can only wrap subclasses of Exception. This design is so that except Exception catches an ExceptionGroup but not BaseExceptionGroup."
